plugins {
  id 'com.android.library'
  id 'org.jetbrains.kotlin.android'
  id("com.google.devtools.ksp").version("1.6.21-1.0.5")
}

def LIB_GROUP_ID = 'app.cash.paykit'
def LIB_ARTIFACT_ID = 'core'
def LIB_VERSION = '0.0.1-SNAPSHOT'

task sourceJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier "sources"
}

android {
  namespace 'app.cash.paykit.core'
  compileSdk 31

  defaultConfig {
    minSdk 21

    // We target the minimum API that meets Google Play's target level, for higher compatibility: https://developer.android.com/google/play/requirements/target-sdk
    //noinspection OldTargetApi
    targetSdk 31

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    consumerProguardFiles "consumer-rules.pro"

    publishing {
      singleVariant("release") {
        withSourcesJar()
        withJavadocJar()
      }
    }
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
  kotlinOptions {
    jvmTarget = '1.8'
  }

  resourcePrefix 'cashpaykit_'

  lintOptions {
    abortOnError true
    htmlReport true
    checkAllWarnings true
    warningsAsErrors true
    baseline file("lint-baseline.xml")
  }

  testOptions {
    unitTests {
      returnDefaultValues = true
      includeAndroidResources = true
    }
  }
}

afterEvaluate {
  publishing {
    publications {
      release(MavenPublication) {
        groupId LIB_GROUP_ID
        artifactId LIB_ARTIFACT_ID
        version LIB_VERSION
        artifact("$buildDir/outputs/aar/paykit-release.aar")
        artifact(sourceJar)

        pom.withXml {
          def dependenciesNode = asNode().appendNode('dependencies')
          configurations.implementation.allDependencies.each { dependency ->
            if (dependency.name != 'unspecified') {
              def dependencyNode = dependenciesNode.appendNode('dependency')
              dependencyNode.appendNode('groupId', dependency.group)
              dependencyNode.appendNode('artifactId', dependency.name)
              dependencyNode.appendNode('version', dependency.version)
            }
          }
        }
      }
    }
  }
}

dependencies {

  // We want to lock this dependency at a lower than latest version to not force transitive updates onto merchants.
  //noinspection GradleDependency
  ksp("com.squareup.moshi:moshi-kotlin-codegen:$moshi_version")
  //noinspection GradleDependency
  implementation("com.squareup.moshi:moshi-kotlin:$moshi_version")

  // Provides a lifecycle for the whole application process.
  implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"

  // TEST RELATED.

  testImplementation "junit:junit:$junit_version"
  testImplementation "io.mockk:mockk:$mockk_version"
  androidTestImplementation "androidx.test.ext:junit-ktx:$junit_androidx_version"
  testImplementation "com.squareup.okhttp3:mockwebserver:$mockwebserver_version"
  // Robolectric environment.
  testImplementation "org.robolectric:robolectric:$robolectric_version"
  // Coroutines test support.
  testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_test_version"
  //Test helpers for Lifecycle runtime
  testImplementation "androidx.lifecycle:lifecycle-runtime-testing:$lifecycle_version"
}
